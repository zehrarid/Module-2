version
library(dplyr)
library(car)
setwd("/Factorial Runs v2")
print("hello")
print("hello")
library(car)
library(reshape2)
library(lime)
librar
print("hello")
print("hello")
setwd("/Factorial Runs v2")
plot(cars)
load("/Users/akshaykulkarni/Desktop/GitHub/ML-based-QC/Factorial Runs v2/final_data.RData")
View(authorN)
library(h2o)
library(MASS)
library(ggExtra)
library(ggplot2)
library(gridExtra)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
library(dplyr
gtewd()
getwd()
load("/Users/akshaykulkarni/Desktop/GitHub/ML-based-QC/Factorial Runs v2/final_data.RData")
library(h2o)
library(MASS)
library(ggExtra)
library(ggplot2)
library(gridExtra)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
library(dplyr)
getwd()
rstudioapi::addTheme("https://raw.githubusercontent.com/patrickshox/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://github.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/edit/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/patrickshox/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://github.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/edit/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://github.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/edit/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://github.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/edit/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://github.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/edit/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://github.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/edit/master/Mojave%20Dark%20(Static).rstheme")
rstudioapi::addTheme("https://raw.githubusercontent.com/patrickshox/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/Akshay-A-Kulkarni/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
rstudioapi::addTheme("https://raw.githubusercontent.com/patrickshox/Mojave-Dark-RStudio-Theme/master/Mojave%20Dark%20(Static).rstheme", apply=TRUE, force=TRUE)
load("/Users/akshaykulkarni/Desktop/GitHub/ML-based-QC/Factorial Runs v2/final_data.RData")
library(h2o)
library(MASS)
library(ggExtra)
library(ggplot2)
library(gridExtra)
library(stats)
library(FrF2)
library(car)
library(reshape2)
library(lime)
library(dplyr)
getwd()
source('src/QCMetrics.R')
source('src/ggradar.R')
source('src/helper-functions.R')
source('src/helper-functions.R')
source("src/data-validation.R")
library(h2o)
library(plotly)
library(dplyr)
library(tidyr)
library(RecordLinkage)
library(ggfortify)
h2o.shutdown()
# h2o.init()
h2oServer = h2o.init( ip = "localhost", port = 54321, max_mem_size = "5g", nthreads = -1 )
h2o.removeAll() # Removes all data from h2o cluster, ensuring it is clean.
input_df <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv")
df_unscaled <- input_checking(input_df)
LVN <- df_unscaled %>% filter(Precursor == "LVNELTEFAK")
View(LVN)
View(LVN)
LVN <- LVN[6:9]
View(LVN)
View(LVN)
LVN <- df_unscaled %>% filter(Precursor == "LVNELTEFAK")
LVN <- LVN %>% group_by(Precursor) %>% mutate_at(metrics, ~(scale(., center = T) %>% as.vector))
input_df <- read.csv("./Datasets/Sampledata_CPTAC_Study_9_1_Site54.csv")
df_unscaled <- input_checking(input_df)
metrics <- c(find_custom_metrics(df_unscaled))
LVN <- df_unscaled %>% filter(Precursor == "LVNELTEFAK")
LVN <- LVN %>% group_by(Precursor) %>% mutate_at(metrics, ~(scale(., center = T) %>% as.vector))
LVN <- LVN[6:9]
# Import the dataset
CPTAC_full <- as.h2o(LVN,destination_frame = "CPTAC_full")
model <- h2o.isolationForest(training_frame=CPTAC_full,
model_id = "isolation_forest.hex",
sample_rate = 0.8,
ntrees = 100,
seed= 12345,
)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h2oObj)
View(score)
View(score)
conf <-  0.98
thresh <-  quantile(score$predict,conf)
test <- prcomp(LVN,center = T,
scale. = T)
info <-  summary(test)
info$importance
info$importance[2]
x <- as.vector(test[["x"]][,1])
y <- as.vector(test[["x"]][,2])
z <- as.vector(test[["x"]][,3])
anom <- as.vector(score$predict)
testdf <-  as.data.frame(cbind(x,y,z,anom)) %>% mutate(anom = if_else(anom > thresh, 'Anomaly', 'Normal') )
fig <- plot_ly(testdf, x = ~x, y = ~y, z = ~z, color = ~anom, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = paste('PC1 ', info$importance[2]*100,"%")),
yaxis = list(title = paste('PC2 ', info$importance[5]*100,"%")),
zaxis = list(title = paste('PC3 ', info$importance[8]*100,"%"))
))
fig
View(testdf)
View(testdf)
testdf <-  as.data.frame(cbind(x,y,z,anom)) %>% mutate(anom = if_else(anom >= thresh, 'Anomaly', 'Normal') )
fig <- plot_ly(testdf, x = ~x, y = ~y, z = ~z, color = ~anom, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = paste('PC1 ', info$importance[2]*100,"%")),
yaxis = list(title = paste('PC2 ', info$importance[5]*100,"%")),
zaxis = list(title = paste('PC3 ', info$importance[8]*100,"%"))
))
fig
model <- h2o.isolationForest(training_frame=CPTAC_full,
model_id = "isolation_forest.hex",
sample_rate = 0.8,
max_depth = 5
ntrees = 100,
model <- h2o.isolationForest(training_frame=CPTAC_full,
model_id = "isolation_forest.hex",
sample_rate = 0.8,
max_depth = 5,
ntrees = 100,
seed= 12345,
)
model <- h2o.isolationForest(training_frame=CPTAC_full,
model_id = "isolation_forest.hex",
sample_rate = 0.8,
max_depth = 5,
ntrees = 100,
seed= 12345,
)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h2oObj)
result_pred <- score$predict
result_ml <- score$mean_length
head(score,20)
hist(result_ml)
hist(result_ml)
qplot(result_pred, geom="histogram")
model <- h2o.isolationForest(training_frame=CPTAC_full,
model_id = "isolation_forest.hex",
sample_rate = 0.8,
max_depth = 5,
ntrees = 100,
seed= 12345,
)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h2oObj)
result_pred <- score$predict
result_ml <- score$mean_length
head(score,20)
hist(result_ml)
qplot(result_pred, geom="histogram")
conf <-  0.98
conf <-  0.98
thresh <-  quantile(score$predict,conf)
test <- prcomp(LVN,center = T,
scale. = T)
info <-  summary(test)
info$importance
info$importance[2]
x <- as.vector(test[["x"]][,1])
y <- as.vector(test[["x"]][,2])
z <- as.vector(test[["x"]][,3])
anom <- as.vector(score$predict)
testdf <-  as.data.frame(cbind(x,y,z,anom)) %>% mutate(anom = if_else(anom >= thresh, 'Anomaly', 'Normal') )
fig <- plot_ly(testdf, x = ~x, y = ~y, z = ~z, color = ~anom, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = paste('PC1 ', info$importance[2]*100,"%")),
yaxis = list(title = paste('PC2 ', info$importance[5]*100,"%")),
zaxis = list(title = paste('PC3 ', info$importance[8]*100,"%"))
))
fig
model <- h2o.isolationForest(training_frame=CPTAC_full,
model_id = "isolation_forest.hex",
sample_rate = 0.8,
max_depth = 10,
ntrees = 100,
seed= 12345,
)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h2oObj)
result_pred <- score$predict
result_ml <- score$mean_length
head(score,20)
hist(result_ml)
qplot(result_pred, geom="histogram")
thresh <-  quantile(score$predict,conf)
Outliers <- score[score$predict>thresh,]
test <- prcomp(LVN,center = T,
scale. = T)
info <-  summary(test)
info$importance
info$importance[2]
x <- as.vector(test[["x"]][,1])
y <- as.vector(test[["x"]][,2])
z <- as.vector(test[["x"]][,3])
anom <- as.vector(score$predict)
testdf <-  as.data.frame(cbind(x,y,z,anom)) %>% mutate(anom = if_else(anom >= thresh, 'Anomaly', 'Normal') )
fig <- plot_ly(testdf, x = ~x, y = ~y, z = ~z, color = ~anom, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = paste('PC1 ', info$importance[2]*100,"%")),
yaxis = list(title = paste('PC2 ', info$importance[5]*100,"%")),
zaxis = list(title = paste('PC3 ', info$importance[8]*100,"%"))
))
fig
LVN <- df_unscaled %>% filter(Precursor == "LVNELTEFAK")
LVN <- LVN[6:9]
allData_hex = as.h2o( LVN )
# Import the dataset
CPTAC_full <- as.h2o(LVN,destination_frame = "CPTAC_full")
# Import the dataset
CPTAC_full <- as.h2o(LVN,destination_frame = "CPTAC_full")
# Split dataset giving the training dataset 75% of the data
CPTAC_split <- h2o.splitFrame(data=CPTAC_full, ratios=0.75)
# Create a training set from the 1st dataset in the split
train <- CPTAC_split[[1]]
View(as.data.frame(train))
model <- h2o.isolationForest(training_frame=CPTAC_full,
model_id = "isolation_forest.hex",
sample_rate = 0.8,
max_depth = 10,
ntrees = 100,
seed= 12345,
)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h2oObj)
result_pred <- score$predict
result_ml <- score$mean_length
head(score,20)
hist(result_ml)
qplot(result_pred, geom="histogram")
conf <-  0.98
thresh <-  quantile(score$predict,conf)
test <- prcomp(LVN,center = T,
scale. = T)
info <-  summary(test)
info$importance
info$importance[2]
x <- as.vector(test[["x"]][,1])
y <- as.vector(test[["x"]][,2])
z <- as.vector(test[["x"]][,3])
anom <- as.vector(score$predict)
testdf <-  as.data.frame(cbind(x,y,z,anom)) %>% mutate(anom = if_else(anom >= thresh, 'Anomaly', 'Normal') )
fig <- plot_ly(testdf, x = ~x, y = ~y, z = ~z, color = ~anom, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = paste('PC1 ', info$importance[2]*100,"%")),
yaxis = list(title = paste('PC2 ', info$importance[5]*100,"%")),
zaxis = list(title = paste('PC3 ', info$importance[8]*100,"%"))
))
fig
model <- h2o.isolationForest(training_frame=CPTAC_full,
model_id = "isolation_forest.hex",
sample_rate = 0.8,
ntrees = 100,
seed= 12345,
)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h2oObj)
result_pred <- score$predict
result_ml <- score$mean_length
head(score,20)
hist(result_ml)
qplot(result_pred, geom="histogram")
conf <-  0.98
thresh <-  quantile(score$predict,conf)
Outliers <- score[score$predict>thresh,]
Outliers1 <- score_h2oObj[score_h2oObj$predict>thresh,]
print(Outliers)
View(score)
View(score)
model <- h2o.isolationForest(training_frame=CPTAC_full,
sample_rate = 0.8,
ntrees = 100,
seed= 123,
)
# Calculate score
score_h2oObj <- h2o.predict(model, CPTAC_full)
score <-  as.data.frame(score_h2oObj)
result_pred <- score$predict
result_ml <- score$mean_length
head(score,20)
hist(result_ml)
qplot(result_pred, geom="histogram")
test <- prcomp(LVN,center = T,
scale. = T)
info <-  summary(test)
info$importance
info$importance[2]
x <- as.vector(test[["x"]][,1])
y <- as.vector(test[["x"]][,2])
z <- as.vector(test[["x"]][,3])
anom <- as.vector(score$predict)
testdf <-  as.data.frame(cbind(x,y,z,anom)) %>% mutate(anom = if_else(anom >= thresh, 'Anomaly', 'Normal') )
fig <- plot_ly(testdf, x = ~x, y = ~y, z = ~z, color = ~anom, colors = c('#BF382A', '#0C4B8E'))
fig <- fig %>% add_markers()
fig <- fig %>% layout(scene = list(xaxis = list(title = paste('PC1 ', info$importance[2]*100,"%")),
yaxis = list(title = paste('PC2 ', info$importance[5]*100,"%")),
zaxis = list(title = paste('PC3 ', info$importance[8]*100,"%"))
))
fig
library(shiny); runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
h2o.shutdown(prompt = FALSE)
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
rep("Normal",5)
length(testdf)
length(testdf$x)
rep("Normal",length(testdf$x))
as.vector(rep("Normal",length(testdf$x)))
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
testdf
testdf[-c(-1)]
testdf[-1]
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
install.packages("shinyFeedback")
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
library(shinyFeedback)
runApp('Desktop/GitHub/MSstatsQCgui_v2.0/tempapp.r')
library(h2o)
library(plotly)
library(dplyr)
library(tidyr)
library(RecordLinkage)
h2o.shutdown(prompt = F)
library(h2o)
h2o.shutdown(prompt = F)
library(dplyr)
shiny::runApp('Desktop/GitHub/MSstatsQCgui_v2.0')
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("markdown")
runApp()
runApp()
